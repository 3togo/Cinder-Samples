/*
Copyright (C) 2011-2012 Paul Houx

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#pragma once

#include "cinder/Cinder.h"
#include "cinder/ImageIo.h"
#include "cinder/Surface.h"
#include "cinder/Utilities.h"
#include "cinder/app/AppBasic.h"
#include "cinder/gl/Texture.h"

#include <map>

namespace ph { namespace text {

typedef std::shared_ptr<class Font> FontRef;

class Font
{
public:
	// stores the font metrics for a single character
	struct Metrics {
		float x;	// x - of character in texture
		float y;	// y - of character in texture
		float w;	// width - of character in texture
		float h;	// height - of character in texture
		float dx;	// xoffset - adjusts character positioning
		float dy;	// yoffset - adjusts character positioning
		float d;	// xadvance - adjusts character positioning
	};

public:
	Font(void);
	~Font(void);

	//! creates a font from the two files generated by LoneSock's SDFont.exe
	void create( const ci::DataSourceRef png, const ci::DataSourceRef txt );
	//! reads a binary font file created using 'writeBinary'
	void read( const ci::DataSourceRef source );
	//! writes the font to a binary file
	void write( const ci::DataTargetRef target );

	//!
	std::string getFamily() const { return mFamily; }

	//!
	float		getAscent( float fontSize=12.0f ) const { return mAscent * (fontSize / mFontSize); }
	//!
	float		getDescent( float fontSize=12.0f ) const { return mDescent * (fontSize / mFontSize); }
	//!
	float		getLeading( float fontSize=12.0f ) const { return mLeading * (fontSize / mFontSize); }
	//!
	float		getSpaceWidth( float fontSize=12.0f ) const { return mSpaceWidth * (fontSize / mFontSize); }

	//!
	bool		contains(uint16_t charcode) const { return (mMetrics.find(charcode) != mMetrics.end()); }

	//!
	ci::Rectf	getBounds(uint16_t charcode, float fontSize=12.0f) const;
	//!
	ci::Rectf	getTexCoords(uint16_t charcode) const;
	//!
	float		getAdvance(uint16_t charcode, float fontSize=12.0f) const;

	//!
	void		enableAndBind() const { if(mTexture) mTexture.enableAndBind(); }
	//!
	void		bind(GLuint textureUnit=0) const { if(mTexture) mTexture.bind(textureUnit); }
	//!
	void		unbind(GLuint textureUnit=0) const  { if(mTexture) mTexture.unbind(textureUnit); }

	//!
	ci::Rectf	measure( const std::string &text, float fontSize=12.0f ) const { return measure( ci::toUtf16(text), fontSize ); }
	//!
	ci::Rectf	measure( const std::wstring &text, float fontSize=12.0f ) const;

	/*//!
	ci::Vec2f	render( ci::TriMesh2d &mesh, const std::string &text, float fontSize=12.0f, const ci::Vec2f &origin=ci::Vec2f::zero() ) {
		render( mesh, ci::toUtf16(text), fontSize, origin );
	}
	//!
	ci::Vec2f	render( ci::TriMesh2d &mesh, const std::wstring &text, float fontSize=12.0f, const ci::Vec2f &origin=ci::Vec2f::zero() );
	//*/
protected:
	bool				mInvalid;

	std::string			mFamily;

	//! calculated by the 'measure' function
	float				mFontSize;
	float				mLeading;
	float				mAscent;
	float				mDescent;
	float				mSpaceWidth;

	ci::Surface			mSurface;
	ci::gl::Texture		mTexture;

	std::map<uint16_t, Metrics>	mMetrics;
};

class FontExc : public std::exception {
 public:
	virtual const char* what() const throw() { return "Font exception"; }
};

class FontInvalidSourceExc : public FontExc {
 public:
	virtual const char* what() const throw() { return "Font exception: could not load from the specified source"; }
};

class FontInvalidTargetExc : public FontExc {
 public:
	virtual const char* what() const throw() { return "Font exception: could not write to the specified target"; }
};

} } // namespace ph::text